# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - none

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: CreateWindowsVM
    displayName: 'Create Windows VM'
    steps:
      - checkout: self
      - task: AzureCLI@2
        displayName: 'Create Azure VM'
        inputs:  
          azureSubscription: 'windowsVM-azurepipeline'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az vm create \
              --resource-group azurepipeline \
              --name windows \
              --image MicrosoftWindowsDesktop:Windows-10:win10-21h2-pro-g2:19044.2364.221205 \
              --public-ip-sku Standard \
              --public-ip-address myipnew \
              --size Standard_D2s_v3 \
              --admin-username syncfusion \
              --admin-password Syncfusion@123 \
              --nsg-rule SSH \
              --nsg-rule RDP \
              --public-ip-address-allocation static  
      - task: AzureCLI@2
        displayName: 'Install IIS Manager'
        inputs:
          azureSubscription: 'windowsVM-azurepipeline'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az vm extension set \
              --resource-group azurepipeline \
              --vm-name windows \
              --name CustomScriptExtension \
              --publisher Microsoft.Compute \
              --settings '{"commandToExecute":"powershell Enable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementConsole -All"}'         
      - task: AzureCLI@2
        displayName: 'Get VM Public IP'
        inputs:
          azureSubscription: 'windowsVM-azurepipeline'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            ipAddress=$(az network public-ip show --resource-group azurepipeline --name myipnew --query ipAddress -otsv)
            echo "##vso[task.setvariable variable=PublicIpAddress]$ipAddress"
      - task: PowerShell@2
        displayName: 'Execute PowerShell Script on VM'
        inputs:
          targetType: 'inline'
          script: |
            $username = 'syncfusion'
            $password = 'Syncfusion@123'
            $ipAddress = '$(PublicIpAddress)'
      
            # Connect to VM using WinRM
            $securePassword = ConvertTo-SecureString -String Syncfusion@123 -AsPlainText -Force
            $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList syncfusion, $securePassword
      
            $session = New-PSSession -ComputerName $(PublicIpAddress) -Credential $cred
            Invoke-Command -Session $session -ScriptBlock {
            # Commands to execute on the VM
            Enable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementConsole -All
            }         
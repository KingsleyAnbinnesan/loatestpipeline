# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - none

parameters:
  - name: linux_package
    displayName: LinuxPackage
    type: string

  - name: Debian
    displayName: Debian
    type: boolean
    default: false

  - name: Ubuntu
    displayName: Ubuntu
    type: boolean
    default: false

  - name: Alpine
    displayName: Alpine
    type: boolean
    default: false

  - name: Debian_Arm64
    displayName: Debian_Arm64
    type: boolean
    default: false

  - name: Ubuntu_Arm64
    displayName: Ubuntu_Arm64
    type: boolean
    default: false

  - name: Alpine_Arm64
    displayName: Alpine_Arm64
    type: boolean
    default: false

jobs:
  - job: DockerImagecreation
    displayName: 'Docker image creation'
    timeoutInMinutes: 0
    pool:
     vmImage: 'Ubuntu-latest'
    
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            sudo docker run --privileged --rm tonistiigi/binfmt --install all

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            sudo docker buildx ls

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            sudo wget '${{parameters.linux_package}}'
            sudo apt install unzip 
            sudo unzip BoldBIEnterpriseEdition_Linux_*
            IMAGE_TAG=$(echo "${{parameters.linux_package}}" | grep -oP 'Linux_Docker_\K[\d\.]+_\d{8}_\d{6}')
            echo "##vso[task.setvariable variable=TAG]$IMAGE_TAG"
            echo "Find the Tag: $TAG"
        continueOnError: true

      - ${{ if eq(parameters.Debian, true) }}:
        - task: Docker@2
          inputs:
            containerRegistry: 'dockeimage-kings-test'
            repository: 'kingsleywills/scanning'
            command: 'buildAndPush'
            Dockerfile: BoldBIEnterpriseEdition-Linux/boldbi-debian.Dockerfile
            tags: |
              $(TAG)_Debian
          displayName: Docker push Debian Image
          continueOnError: true   # Adding continueOnError directive at the task level
      
      - ${{ if eq(parameters.Ubuntu, true) }}:
        - task: Docker@2
          inputs:
            containerRegistry: 'dockeimage-kings-test'
            repository: 'kingsleywills/scanning'
            command: 'buildAndPush'
            Dockerfile: BoldBIEnterpriseEdition-Linux/boldbi-ubuntu.Dockerfile
            tags: |
              $(TAG)_Ubuntu
          displayName: Docker push Ubuntu Image
          continueOnError: true   # Adding continueOnError directive at the task level
        
      - script: |
          sudo docker rmi $(docker images -q) -f
          sudo docker system prune -a --force
          sudo docker run --privileged --rm tonistiigi/binfmt --install all
          sudo docker buildx ls

      - ${{ if eq(parameters.Debian_Arm64, true) }}:
        - task: Docker@2
          inputs:
            containerRegistry: 'dockeimage-kings-test'
            repository: 'kingsleywills/scanning'
            command: 'buildAndPush'
            Dockerfile: BoldBIEnterpriseEdition-Linux/boldbi-debian-arm64.Dockerfile
            tags: |
              $(TAG)_Ubuntu
          displayName: Docker push Debian-Arm64 Image
          continueOnError: true   # Adding continueOnError directive at the task level

      - ${{ if eq(parameters.Ubuntu_Arm64, true) }}:
        - task: Docker@2
          inputs:
            containerRegistry: 'dockeimage-kings-test'
            repository: 'kingsleywills/scanning'
            command: 'buildAndPush'
            Dockerfile: BoldBIEnterpriseEdition-Linux/boldbi-ubuntu-arm64.Dockerfile
            tags: |
              $(TAG)_Ubuntu
          displayName: Docker push Ubuntu-Arm64 Image
          continueOnError: true   # Adding continueOnError directive at the task level
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            if (${{ parameters.Alpine }} -eq $true -or ${{ parameters.Alpine_Arm64 }} -eq $true) {
              sudo docker rmi $(docker images -q) -f
              sudo docker system prune -a --force
              sudo docker run --privileged --rm tonistiigi/binfmt --install all
              sudo docker buildx ls
              sudo cp -r BoldBIEnterpriseEdition-Linux/entrypoint.sh BoldBIEnterpriseEdition-Linux/application/
            }
        
      - ${{ if eq(parameters.Alpine, true) }}:
        - task: Docker@2
          inputs:
            containerRegistry: 'dockeimage-kings-test'
            repository: 'kingsleywills/scanning'
            command: 'buildAndPush'
            Dockerfile: BoldBIEnterpriseEdition-Linux/boldbi-alpine.Dockerfile
            tags: |
              $(TAG)_Ubuntu
          displayName: Docker push Alpine Image
          continueOnError: true   # Adding continueOnError directive at the task level
        
      - ${{ if eq(parameters.Alpine_Arm64, true) }}:
        - task: Docker@2
          inputs:
            containerRegistry: 'dockeimage-kings-test'
            repository: 'kingsleywills/scanning'
            command: 'buildAndPush'
            Dockerfile: BoldBIEnterpriseEdition-Linux/boldbi-ubuntu.Dockerfile
            tags: |
              $(TAG)_Ubuntu
          displayName: Docker push Alpine-Arm64 Image
          continueOnError: true   # Adding continueOnError directive at the task level  
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - none

variables:
  HomeDirectory: "/home/vsts/work/1/s"



parameters:
  - name: linux_package
    displayName: LinuxPackage
    type: string

jobs:
  - job: KubernetesImagecreation
    displayName: 'Kubernetes image creation'
    timeoutInMinutes: 0
    pool:
      vmImage: 'ubuntu-latest'
  
    
    steps:

      - script: |
          GitHubRepository="https://github.com/bold-bi/boldbi-ci.git"           
          echo "##vso[task.setvariable variable=GitHubRepo]$GitHubRepository"
          GitHubBranch="hotfix/boldbi_v7"
          echo "##vso[task.setvariable variable=GitBranch]$GitHubBranch"
        displayName: 'Assign azure values'

    
      - script: |
          echo "$(GitHubRepo)"
          echo "$(GitBranch)"
          echo "$(AzureGitToken)"
          repository=$(echo '$(GitHubRepo)' | cut -c 19-)
          echo "$repository"
          git_token_repo="https://$(AzureGitName):$(AzureGitToken)@github.com${repository}"
          echo "$git_token_repo"
          git clone -b $(GitBranch) "$git_token_repo"
          echo "$(pwd)"
        displayName: 'Clone GitHub repository'
    
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            sudo wget "${{parameters.linux_package}}"
            sudo apt install -y unzip 
            sudo unzip BoldBIEnterpriseEdition_Linux_*
            IMAGE_TAG=$(echo "${{parameters.linux_package}}" | grep -oP 'Linux_\K[\d\.]+_\d{8}_\d{6}')
            echo "##vso[task.setvariable variable=TAG]$IMAGE_TAG"
            echo "Find the Image Tag: $IMAGE_TAG"

            sudo mkdir -p $(HomeDirectory)/BoldBIEnterpriseEdition-Linux/application/idp/web/appdatafiles && echo "appdatafiles directory created"
            appdatafilesDirectory=$(HomeDirectory)/BoldBIEnterpriseEdition-Linux/application/idp/web/appdatafiles

            installutilsFolderSource=$(HomeDirectory)/BoldBIEnterpriseEdition-Linux/application/utilities/installutils
            installutilsFolderDestination=$(HomeDirectory)/BoldBIEnterpriseEdition-Linux/application/idp/web/appdatafiles/installutils
            sudo cp -r $installutilsFolderSource $installutilsFolderDestination && echo "installutils are moved into appdatafiles"
            ls $installutilsFolderDestination

            id_webFileSource=$(HomeDirectory)/boldbi-ci/installscripts/jenkins-ci/kubernetes/shell_scripts/id_web/*
            id_webFileDestination=$(HomeDirectory)/BoldBIEnterpriseEdition-Linux/application/idp/web/
            sudo cp -r $id_webFileSource $id_webFileDestination && echo "entrypoint.sh moved properly"
            ls $id_webFileDestination
            
            designerFileSource=$(HomeDirectory)/boldbi-ci/installscripts/jenkins-ci/kubernetes/shell_scripts/designer/*
            designerFileDestination=$(HomeDirectory)/BoldBIEnterpriseEdition-Linux/application/bi/dataservice
            sudo cp -r $designerFileSource $designerFileDestination && echo "designer files are moved"

            configurationFileSource=$(HomeDirectory)/BoldBIEnterpriseEdition-Linux/application/app_data/*
            configurationFileDestination=$(HomeDirectory)/BoldBIEnterpriseEdition-Linux/application/idp/web/appdatafiles/installutils/app_data
            sudo cp -r $configurationFileSource $configurationFileDestination && echo "app_data files are moved"
            ls $configurationFileSource
            ls $configurationFileDestination
            
            clientLibraryFileSource=$(HomeDirectory)/BoldBIEnterpriseEdition-Linux/clientlibrary/clientlibrary.zip
            clientLibraryFileDestination=$(HomeDirectory)/BoldBIEnterpriseEdition-Linux/application/idp/web/appdatafiles/installutils/app_data/optional-libs
            sudo unzip -o $clientLibraryFileSource -d $clientLibraryFileDestination
            ls $clientLibraryFileDestination

            sourceDir="$(HomeDirectory)/boldbi-ci/installscripts/jenkins-ci/kubernetes/dockerfiles/ubuntu/"
            destinationDir="$(HomeDirectory)/BoldBIEnterpriseEdition-Linux"
            # Find all .txt files in the source directory
            multipleDockerFileUrls=($(find "$sourceDir" -maxdepth 1 -type f -name "*.txt"))
            # Iterate through each file
            for multipleDockerFileUrl in "${multipleDockerFileUrls[@]}"; do
                # Extract filename from URL
                MultipleDockerFile=$(basename "$multipleDockerFileUrl")
                # Extract Kubernetes image name
                kubernetesImageName=$(echo "$MultipleDockerFile" | cut -d'-' -f2- | cut -d'.' -f1)
                # Construct source and destination paths for copying
                copyMultipleDockerSourceFile="${sourceDir}${MultipleDockerFile}"
                copyMultipleDockerDestinationFile="${destinationDir}"
                # Copy Dockerfile
                sudo cp "$copyMultipleDockerSourceFile" "$copyMultipleDockerDestinationFile"
                echo "Copied $copyMultipleDockerSourceFile to $copyMultipleDockerDestinationFile"
                # Construct source and destination paths for moving
                moveMultipleDockerSourceFile="${destinationDir}${MultipleDockerFile}"
                kubernetesFile="${kubernetesImageName}.Dockerfile"
                moveMultipleDockerDestinationFile="${destinationDir}${kubernetesFile}"
                # Move Dockerfile with new filename
                sudo mv "$moveMultipleDockerSourceFile" "$moveMultipleDockerDestinationFile"
                echo "Moved $moveMultipleDockerSourceFile to $moveMultipleDockerDestinationFile"
            done
            ls $destinationDir
        continueOnError: true
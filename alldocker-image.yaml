# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - none

#variables:
 # Path: "/home/vsts/work/1/s"


parameters:
  - name: linux_package
    displayName: LinuxPackage
    type: string

jobs:
  - job: KubernetesImagecreation
    displayName: 'Kubernetes image creation'
    timeoutInMinutes: 0
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:

      - script: |
          GitHubRepository="https://github.com/bold-bi/boldbi-ci.git"           
          echo "##vso[task.setvariable variable=GitHubRepo]$GitHubRepository"
          GitHubBranch="hotfix/boldbi_v7"
          echo "##vso[task.setvariable variable=GitBranch]$GitHubBranch"
        displayName: 'Assign azure values'

    
      - script: |
          echo "$(GitHubRepo)"
          echo "$(GitBranch)"
          echo "$(AzureGitToken)"
          sudo apt update
          sudo apt install git
          repository=$(echo '$(GitHubRepo)' | cut -c 19-)
          echo "$repository"
          git_token_repo="https://$(AzureGitName):$(AzureGitToken)@github.com${repository}"
          echo "$git_token_repo"
          git clone -b $(GitBranch) "$git_token_repo"
          echo "$(pwd)"
        displayName: 'Clone GitHub repository'
    
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            sudo wget '${{parameters.linux_package}}'
            sudo apt install unzip 
            sudo unzip BoldBIEnterpriseEdition_Linux_*
            IMAGE_TAG=$(echo "${{parameters.linux_package}}" | grep -oP 'Linux_Docker_\K[\d\.]+_\d{8}_\d{6}')
            echo "##vso[task.setvariable variable=TAG]$IMAGE_TAG"
            echo "Find the Image Tag: $IMAGE_TAG"      
        continueOnError: true
      
      - script: |
          mkdir -p $(Path)/BoldBIEnterpriseEdition-Linux/application/idp/web/appdatafiles
          echo "appdatafiles directory created"
          appdatafilesDirectory=$(Path)/BoldBIEnterpriseEdition-Linux/application/idp/web/appdatafiles
          installutilsFolderSource=$(Path)/BoldBIEnterpriseEdition-Linux/application/utilities/installutils
          installutilsFolderDestination=$(Path)/BoldBIEnterpriseEdition-Linux/application/idp/web/appdatafiles/installutils
          cp -r $installutilsFolderSource $installutilsFolderDestination
          echo "installutils are moved into appdatafiles"
        displayName: 'Create appdatafiles directory and copy installutils folder'